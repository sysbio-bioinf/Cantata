origAtt <- getAttractors(origNet, startStates=startStates)
}
origNumDependencies <- sum(sapply(origNet$interactions,function(int)length(int$input)))
modifiedNets <- lapply(modifiedFiles, function(file)loadNetwork(file, bodySeparator=bodySeparator))
numDependencies <- sapply(modifiedNets,function(net)sum(sapply(net$interactions,function(int)length(int$input))))
if (compareAttractors || compareTransitionTables)
{
modAtt <- lapply(modifiedNets, function(net)
getAttractors(net, startStates=startStates))
sink()
attractorsEqual <- sapply(modAtt, function(att)
{
compareAttractors(origAtt, att)
})
}
else
attractorsEqual <- NULL
if (compareTransitionTables)
{
ttEqual <- sapply(modAtt, function(att)
{
identical(att$stateInfo$table, origAtt$stateInfo$table)
})
}
else
ttEqual <- NULL
if (compareAttractors)
{
usedAttractors <- attractorsEqual
}
else
usedAttractors <- rep(TRUE, length(modifiedNets))
dependencies <- lapply(modifiedNets[usedAttractors], function(net)
{
sapply(net$interactions, function(int)
{
r <- rep(0, length(origNet$genes))
r[int$input] <- 1
return(r)
})
})
insertions <- lapply(modifiedNets[usedAttractors], function(net)
{
if (length(origNet$interactions) != length(net$interactions))
{
print(origNet$interactions)
print(net$interactions)
}
mapply(function(int1, int2)
{
s <- setdiff(int2$input, int1$input)
r <- rep(0, length(origNet$genes))
r[s] <- 1
return(r)
}, origNet$interactions, net$interactions)
})
deletions <- lapply(modifiedNets[usedAttractors], function(net)
{
mapply(function(int1, int2)
{
s <- setdiff(int1$input, int2$input)
r <- rep(0, length(origNet$genes))
r[s] <- 1
return(r)
}, origNet$interactions, net$interactions)
})
#functionClasses <- lapply(modifiedNets[usedAttractors], function(net)
#                    {
#                        r <- summarizeFunctionClasses(net)
#                        r[is.na(r)] <- 0
#                        r
#                    })
numInsertions <- sapply(insertions, function(ins)
{
sum(ins)
})
numDeletions <- sapply(deletions, function(del)
{
sum(del)
})
numModifications <- mapply(function(ins,del)
{
sum(ins) + sum(del)
}, insertions, deletions)
dependencies <- Reduce(function(a,b)a+b, dependencies)
insertions <- Reduce(function(a,b)a+b, insertions)
deletions <- Reduce(function(a,b)a+b, deletions)
#functionClasses <- Reduce(function(a,b)a+b, functionClasses)
rownames(dependencies) <- origNet$genes
rownames(insertions) <- origNet$genes
rownames(deletions) <- origNet$genes
return(list(origNumDependencies = origNumDependencies,
origFunctionClasses = origFunctionClasses,
numDependencies = numDependencies[usedAttractors],
dependencies = dependencies,
insertions = insertions, deletions = deletions,
#functionClasses = functionClasses,
numInsertions = numInsertions,
numDeletions = numDeletions,
numModifications = numModifications,
usedAttractors = usedAttractors,
attractorsEqual = attractorsEqual,
ttEqual = ttEqual))
}
analyzeYeastResults <- function(numNets=100, folder="result", partial=TRUE)
{
if (!partial)
indices <- 1:numNets
else
{
cat("Examined networks:\n")
indices <- (1:numNets)[sapply(1:numNets,function(i)
file.exists(paste(folder,"/result_fissionyeast_trunc_",i,".txt",sep="")))]
print(indices)
}
cat("Changes in mutated networks:\n")
files <- paste(folder,"/fissionyeast_trunc_",indices,".txt",sep="")
res1 <- compareNetworks("fissionyeast_dnf.txt", files, compareAttractors=FALSE)
summarizeComparison(res1)
roundedOrigDependencies <- round(res1$dependencies/numNets * 100, 2)
roundedOrigDeletions <- round(res1$deletions/numNets * 100, 2)
roundedOrigInsertions <- round(res1$insertions/numNets * 100, 2)
files <- lapply(indices,function(i)list.files(folder,
paste("resultnet_fissionyeast_trunc_",i,"_[0-9]*.txt",sep=""),
full.names=TRUE))
cat("Networks that could not be reconstructed:\n")
numReconst <- sapply(files,length)
print(which(numReconst == 0))
cat("Number of networks that could not be reconstructed:\n")
print(sum(numReconst == 0))
cat("Networks matching the conditions:\n")
files <- unlist(files)
matchingParts <- t(sapply(files,function(file)
{
net <- loadNetwork(file,lowercaseGenes=TRUE)
net <- fixGenes(net,1:length(net$genes),-1)
unlist(compareProperties(net))
}))
#print(matchingParts)
matching <- apply(matchingParts,1,function(m)all(unlist(m)))
cat(sum(matching),"/",length(files),"\n",sep="")
cat("Average number of candidates (matching conditions exactly):\n")
print(sum(matching)/sum(numReconst != 0))
cat("Average number of candidates (all):\n")
print(length(files)/sum(numReconst != 0))
#cat("Networks not matching the conditions:\n")
#print(files[!matching])
cat("Changes in repaired networks:\n")
res2 <- compareNetworks("fissionyeast_dnf.txt", files, compareTransitionTables=TRUE, compareAttractors=FALSE)
summarizeComparison(res2)
roundedReconstDependencies <- round(res2$dependencies/sum(res2$usedAttractors) * 100, 2)
roundedReconstDeletions <- round(res2$deletions/sum(res2$usedAttractors) * 100, 2)
roundedReconstInsertions <- round(res2$insertions/sum(res2$usedAttractors) * 100, 2)
relevantDependencies <- getRelevantDependencies("fissionyeast_dnf.txt",cantataPath)
delDiff <- (roundedOrigDeletions - roundedReconstDeletions)
recovered <- c(sum(roundedReconstDeletions[as.logical(relevantDependencies)] < 0.0005 &
roundedOrigDeletions[as.logical(relevantDependencies)] > 0.0005),
sum(roundedReconstDeletions[as.logical(relevantDependencies)] >= 0.0005 &
delDiff[as.logical(relevantDependencies)] > 0.0),
sum(roundedOrigDeletions[as.logical(relevantDependencies)] > 0 &
delDiff[as.logical(relevantDependencies)] == 0),
sum(delDiff[as.logical(relevantDependencies)] < 0.0))
names(recovered) <- c("Always","Partially","No change","Deletion")
print(recovered)
cat("Deletions:\n")
cat(asLatexTable(roundedOrigDeletions,roundedReconstDeletions,relevantDependencies))
cat("Insertions:\n")
disabledRel <- matrix(FALSE, nrow=nrow(relevantDependencies), ncol=ncol(relevantDependencies))
cat(asLatexTable(roundedOrigInsertions,roundedReconstInsertions,disabledRel, simpleComparison=T))
cat("Overall:\n")
cat(asLatexTable(roundedOrigInsertions - roundedOrigDeletions,roundedReconstInsertions - roundedReconstDeletions,disabledRel, simpleComparison=T))
return(invisible(list(truncated=res1,reconstructed=res2, crucial=relevantDependencies)))
}
writeSummaries <- function(folders, ...)
{
#source("../cellcycle/calculateNumberOfCandidates.R")
return(lapply(folders, function(folder)
{
sink(paste(folder,"/summary.txt",sep=""))
r <- analyzeYeastResults(folder=folder)
sink()
pdf(paste(folder,"/deletions.pdf",sep=""),width=7,height=5)
plotReconstructionHeatmap(truncated=r$truncated$deletions,
reconstructed=r$reconstructed$deletions,
crucial=r$crucial,
numTruncated=length(r$truncated$usedAttractors),
numReconstructed=sum(r$reconstructed$usedAttractors))
dev.off()
pdf(paste(folder,"/insertions.pdf",sep=""),width=7,height=5)
plotReconstructionHeatmap(truncated=r$truncated$insertions,
reconstructed=r$reconstructed$insertions,
numTruncated=length(r$truncated$usedAttractors),
numReconstructed=sum(r$reconstructed$usedAttractors),
limit=10)
dev.off()
pdf(paste(folder,"/depchanges.pdf",sep=""),width=11,height=12)
pvals <- plotReconstructionArcGraph(r, originalNetwork="fissionyeast_dnf.txt",
cutAt=0.05, cutMode="test")
dev.off()
pdf(paste(folder,"/overview.pdf",sep=""), width=9, height=6)
par(mar = c(6,5,1,1) + 0.1)
#par(mfrow=c(1,2))
load("res_bestfit_sameIndegree_1000000.dat")
#plotDependencies(r$truncated$dependencies, original=res_bestfit$original,
#                 numReconst=length(r$truncated$attractorsEqual),
#                 crucial=r$crucial,
#                 main="Perturbed networks", ...)
plotDependencies(r$reconstructed$dependencies, original=res_bestfit$original,
numReconst=sum(r$reconstructed$usedAttractors),
comparison=r$truncated$dependencies,
numComparison=length(r$truncated$usedAttractors),
crucial=r$crucial,
...)
dev.off()
#pdf("overview_bestfit_1000000.pdf", width=9, height=6)
#par(mar = c(6,5,1,1) + 0.1)
#buildAndPlotDependencies(res_bestfit,
#                         crucial=r$crucial,...)
#dev.off()
return(list(res= r, pvals = pvals))
}))
}
writeSummaries <- function(folders, ...)
{
#source("../cellcycle/calculateNumberOfCandidates.R")
return(lapply(folders, function(folder)
{
sink(paste(folder,"/summary.txt",sep=""))
r <- analyzeYeastResults(folder=folder)
sink()
pdf(paste(folder,"/deletions.pdf",sep=""),width=7,height=5)
plotReconstructionHeatmap(truncated=r$truncated$deletions,
reconstructed=r$reconstructed$deletions,
crucial=r$crucial,
numTruncated=length(r$truncated$usedAttractors),
numReconstructed=sum(r$reconstructed$usedAttractors))
dev.off()
pdf(paste(folder,"/insertions.pdf",sep=""),width=7,height=5)
plotReconstructionHeatmap(truncated=r$truncated$insertions,
reconstructed=r$reconstructed$insertions,
numTruncated=length(r$truncated$usedAttractors),
numReconstructed=sum(r$reconstructed$usedAttractors),
limit=10)
dev.off()
pdf(paste(folder,"/depchanges.pdf",sep=""),width=11,height=12)
pvals <- plotReconstructionArcGraph(r, originalNetwork="fissionyeast_dnf.txt",
cutAt=0.05, cutMode="test")
dev.off()
pdf(paste(folder,"/overview.pdf",sep=""), width=9, height=6)
par(mar = c(6,5,1,1) + 0.1)
#par(mfrow=c(1,2))
load("res_bestfit_sameIndegree_1000000.dat")
#plotDependencies(r$truncated$dependencies, original=res_bestfit$original,
#                 numReconst=length(r$truncated$attractorsEqual),
#                 crucial=r$crucial,
#                 main="Perturbed networks", ...)
plotDependencies(r$reconstructed$dependencies, original=res_bestfit$original,
numReconst=sum(r$reconstructed$usedAttractors),
comparison=r$truncated$dependencies,
numComparison=length(r$truncated$usedAttractors),
crucial=r$crucial,
...)
dev.off()
#pdf("overview_bestfit_1000000.pdf", width=9, height=6)
#par(mar = c(6,5,1,1) + 0.1)
#buildAndPlotDependencies(res_bestfit,
#                         crucial=r$crucial,...)
#dev.off()
return(list(res= r, pvals = pvals))
}))
}
writeSummaries <- function(folders, ...)
{
#source("../cellcycle/calculateNumberOfCandidates.R")
return(lapply(folders, function(folder)
{
sink(paste(folder,"/summary.txt",sep=""))
r <- analyzeYeastResults(folder=folder)
sink()
pdf(paste(folder,"/deletions.pdf",sep=""),width=7,height=5)
plotReconstructionHeatmap(truncated=r$truncated$deletions,
reconstructed=r$reconstructed$deletions,
crucial=r$crucial,
numTruncated=length(r$truncated$usedAttractors),
numReconstructed=sum(r$reconstructed$usedAttractors))
dev.off()
pdf(paste(folder,"/insertions.pdf",sep=""),width=7,height=5)
plotReconstructionHeatmap(truncated=r$truncated$insertions,
reconstructed=r$reconstructed$insertions,
numTruncated=length(r$truncated$usedAttractors),
numReconstructed=sum(r$reconstructed$usedAttractors),
limit=10)
dev.off()
pdf(paste(folder,"/depchanges.pdf",sep=""),width=11,height=12)
pvals <- plotReconstructionArcGraph(r, originalNetwork="fissionyeast_dnf.txt",
cutAt=0.05, cutMode="test")
dev.off()
pdf(paste(folder,"/overview.pdf",sep=""), width=9, height=6)
par(mar = c(6,5,1,1) + 0.1)
#par(mfrow=c(1,2))
load("res_bestfit_sameIndegree_1000000.dat")
#plotDependencies(r$truncated$dependencies, original=res_bestfit$original,
#                 numReconst=length(r$truncated$attractorsEqual),
#                 crucial=r$crucial,
#                 main="Perturbed networks", ...)
plotDependencies(r$reconstructed$dependencies, original=res_bestfit$original,
numReconst=sum(r$reconstructed$usedAttractors),
comparison=r$truncated$dependencies,
numComparison=length(r$truncated$usedAttractors),
crucial=r$crucial,
...)
dev.off()
#pdf("overview_bestfit_1000000.pdf", width=9, height=6)
#par(mar = c(6,5,1,1) + 0.1)
#buildAndPlotDependencies(res_bestfit,
#                         crucial=r$crucial,...)
#dev.off()
return(list(res= r, pvals = pvals))
}))
}
writeSummaries(folders = c("result/5_depchange_0.25_1/","result/7_depchange_0.25_1/"))
compareNetworks <- function(origFile, modifiedFiles, bodySeparator = ",", compareAttractors=TRUE, compareTransitionTables=FALSE)
{
#source("../functionClassAnalysis.R")
origNet <- loadNetwork(origFile)
#origFunctionClasses <- summarizeFunctionClasses(origNet)
if (length(origNet$genes) > 15)
startStates = 10000
else
startStates = NULL
if (compareAttractors || compareTransitionTables)
{
sink("/dev/null")
origAtt <- getAttractors(origNet, startStates=startStates)
}
origNumDependencies <- sum(sapply(origNet$interactions,function(int)length(int$input)))
modifiedNets <- lapply(modifiedFiles, function(file)loadNetwork(file, bodySeparator=bodySeparator))
numDependencies <- sapply(modifiedNets,function(net)sum(sapply(net$interactions,function(int)length(int$input))))
if (compareAttractors || compareTransitionTables)
{
modAtt <- lapply(modifiedNets, function(net)
getAttractors(net, startStates=startStates))
sink()
attractorsEqual <- sapply(modAtt, function(att)
{
compareAttractors(origAtt, att)
})
}
else
attractorsEqual <- NULL
if (compareTransitionTables)
{
ttEqual <- sapply(modAtt, function(att)
{
identical(att$stateInfo$table, origAtt$stateInfo$table)
})
}
else
ttEqual <- NULL
if (compareAttractors)
{
usedAttractors <- attractorsEqual
}
else
usedAttractors <- rep(TRUE, length(modifiedNets))
dependencies <- lapply(modifiedNets[usedAttractors], function(net)
{
sapply(net$interactions, function(int)
{
r <- rep(0, length(origNet$genes))
r[int$input] <- 1
return(r)
})
})
insertions <- lapply(modifiedNets[usedAttractors], function(net)
{
if (length(origNet$interactions) != length(net$interactions))
{
print(origNet$interactions)
print(net$interactions)
}
mapply(function(int1, int2)
{
s <- setdiff(int2$input, int1$input)
r <- rep(0, length(origNet$genes))
r[s] <- 1
return(r)
}, origNet$interactions, net$interactions)
})
deletions <- lapply(modifiedNets[usedAttractors], function(net)
{
mapply(function(int1, int2)
{
s <- setdiff(int1$input, int2$input)
r <- rep(0, length(origNet$genes))
r[s] <- 1
return(r)
}, origNet$interactions, net$interactions)
})
#functionClasses <- lapply(modifiedNets[usedAttractors], function(net)
#                    {
#                        r <- summarizeFunctionClasses(net)
#                        r[is.na(r)] <- 0
#                        r
#                    })
numInsertions <- sapply(insertions, function(ins)
{
sum(ins)
})
numDeletions <- sapply(deletions, function(del)
{
sum(del)
})
numModifications <- mapply(function(ins,del)
{
sum(ins) + sum(del)
}, insertions, deletions)
dependencies <- Reduce(function(a,b)a+b, dependencies)
insertions <- Reduce(function(a,b)a+b, insertions)
deletions <- Reduce(function(a,b)a+b, deletions)
#functionClasses <- Reduce(function(a,b)a+b, functionClasses)
rownames(dependencies) <- origNet$genes
rownames(insertions) <- origNet$genes
rownames(deletions) <- origNet$genes
return(list(origNumDependencies = origNumDependencies,
origFunctionClasses = origFunctionClasses,
numDependencies = numDependencies[usedAttractors],
dependencies = dependencies,
insertions = insertions, deletions = deletions,
#functionClasses = functionClasses,
numInsertions = numInsertions,
numDeletions = numDeletions,
numModifications = numModifications,
usedAttractors = usedAttractors,
attractorsEqual = attractorsEqual,
ttEqual = ttEqual))
}
writeSummaries(folders = c("result/5_depchange_0.25_1/","result/7_depchange_0.25_1/"))
writeSummaries(folders = c("result/5_depchange_0.25_1/","result/7_depchange_0.25_1/"))
writeSummaries <- function(folders, ...)
{
#source("../cellcycle/calculateNumberOfCandidates.R")
return(lapply(folders, function(folder)
{
sink(paste(folder,"/summary.txt",sep=""))
r <- analyzeYeastResults(folder=folder)
sink()
pdf(paste(folder,"/deletions.pdf",sep=""),width=7,height=5)
plotReconstructionHeatmap(truncated=r$truncated$deletions,
reconstructed=r$reconstructed$deletions,
crucial=r$crucial,
numTruncated=length(r$truncated$usedAttractors),
numReconstructed=sum(r$reconstructed$usedAttractors))
dev.off()
pdf(paste(folder,"/insertions.pdf",sep=""),width=7,height=5)
plotReconstructionHeatmap(truncated=r$truncated$insertions,
reconstructed=r$reconstructed$insertions,
numTruncated=length(r$truncated$usedAttractors),
numReconstructed=sum(r$reconstructed$usedAttractors),
limit=10)
dev.off()
pdf(paste(folder,"/depchanges.pdf",sep=""),width=11,height=12)
pvals <- plotReconstructionArcGraph(r, originalNetwork="fissionyeast_dnf.txt",
cutAt=0.05, cutMode="test")
dev.off()
pdf(paste(folder,"/overview.pdf",sep=""), width=9, height=6)
par(mar = c(6,5,1,1) + 0.1)
#par(mfrow=c(1,2))
load("res_bestfit_sameIndegree_1000000.dat")
#plotDependencies(r$truncated$dependencies, original=res_bestfit$original,
#                 numReconst=length(r$truncated$attractorsEqual),
#                 crucial=r$crucial,
#                 main="Perturbed networks", ...)
plotDependencies(r$reconstructed$dependencies, original=res_bestfit$original,
numReconst=sum(r$reconstructed$usedAttractors),
comparison=r$truncated$dependencies,
numComparison=length(r$truncated$usedAttractors),
crucial=r$crucial,
...)
dev.off()
#pdf("overview_bestfit_1000000.pdf", width=9, height=6)
#par(mar = c(6,5,1,1) + 0.1)
#buildAndPlotDependencies(res_bestfit,
#                         crucial=r$crucial,...)
#dev.off()
return(list(res= r, pvals = pvals))
}))
}
source('~/Dropbox/Arbeit/cantata-code/cantata-results/networkComparison.R')
writeSummaries(folders = c("result/5_depchange_0.25_1/","result/7_depchange_0.25_1/"))
cantataPath <- "/Users/julian_schwab/Dropbox/Arbeit/Cantata2020/cantata-code/bin/cantata"
writeSummaries(folders = c("result/5_depchange_0.25_1/","result/7_depchange_0.25_1/"))
library("BoolNet")
load(cellcycle)
load(cellcycle)
data(cellcycle)
pertNet2 <- fixGenes(cellcycle, c("CycE"), c(0))
pertNet2
#knock out example (either by index or gene name)
pertNet1 <- fixGenes(cellcycle, c(2,3), c(0,1))
pertNet1
origAttrs <- getAttractors(cellcycle)
origAttrs
sink()
sink()
sink()
sink()
origAttrs
library("BoolNet")
data(cellcycle)
origAttrs <- getAttractors(cellcycle)
origAttrs
